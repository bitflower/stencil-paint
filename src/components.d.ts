/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */


import {
  PaintCanvas as PaintCanvas
} from './components/canvas/canvas';

interface HTMLPaintCanvasElement extends PaintCanvas, HTMLElement {
}
declare var HTMLPaintCanvasElement: {
  prototype: HTMLPaintCanvasElement;
  new (): HTMLPaintCanvasElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "paint-canvas": HTMLPaintCanvasElement;
  }
  interface ElementTagNameMap {
      "paint-canvas": HTMLPaintCanvasElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "paint-canvas": JSXElements.PaintCanvasAttributes;
      }
  }
  namespace JSXElements {
      export interface PaintCanvasAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          color?: string,
          width?: number
      }
  }
}


import {
  PaintContainer as PaintContainer
} from './components/container/container';

interface HTMLPaintContainerElement extends PaintContainer, HTMLElement {
}
declare var HTMLPaintContainerElement: {
  prototype: HTMLPaintContainerElement;
  new (): HTMLPaintContainerElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "paint-container": HTMLPaintContainerElement;
  }
  interface ElementTagNameMap {
      "paint-container": HTMLPaintContainerElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "paint-container": JSXElements.PaintContainerAttributes;
      }
  }
  namespace JSXElements {
      export interface PaintContainerAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

